<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="MAIN" Id="{7dd1b2e8-f1fc-4e83-ad39-d5dd62fa26f2}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
    fbLogHandler : FB_LogHandler;

    //TMO Interface
xEcatBridge_COM_ERROR : BOOL;
ITF_TMO_ROUGH1_VRC_01: FB_TVGC_2S_ADS; //FB for accessing "TMO_ROUGH1_VRC_01" VGC_2S data from PLC-TMO-VAC
ITF_TMO_ROUGH2_VRC_01: FB_TVGC_2S_ADS; //FB for accessing "TMO_ROUGH2_VRC_01" VGC_2S data from PLC-TMO-VAC
i_iWatchdog	:	UDINT; // PLC-TMO-VAC will write to this Watchdog variable
b_TurboPumpRunningFlag : BOOL;
TurboPumpTOF : TOF;
TurboPumpDelayTime : TIME := T#30s;

fbGetCurTaskIndex : GETCURTASKINDEX;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
fbLogHandler();
// Run the Diagnostics PRG
DIAGNOSTICS();
(*PLC-TMO-VAC ADS interface*)
(*//Writes watchdog bit to remote vac_TMO reading the vacuum components
fb_ADS_WATCHDOG_VAC_CVMI_TMO(
    sNetId:= '172.21.132.22.1.1',
    nPort:= 851,
    sVarName:= 'PRG_ADS_Interfaces.i_iWatchdog',
    bError=> );

ITF_TMO_ROUGH1_VRC_01(//Roughing valve Readback from IP1 Roughing Line
    sNetId:= '172.21.132.22.1.1',
    nPort:= 851,
    sVarName:= 'GVL_Hutch_Valves.TMO_ROUGH1_VRC_01',
    iWatchdog:= i_iWatchdog,
    VGC=> ,
    bError=> );

ITF_TMO_ROUGH2_VRC_01(//Roughing valve Readback from the Gas Jet Roughing Line
    sNetId:= '172.21.132.22.1.1',
    nPort:= 851,
    sVarName:= 'GVL_Hutch_Valves.TMO_ROUGH2_VRC_01',
    iWatchdog:= i_iWatchdog,
    VGC=> ,
    bError=> );
    *)

(*EtherCAT Bridge Status*)
//xEcatBridge_COM_ERROR := TRUE means that there is an EtherCAT Bridge Communication error.
xEcatBridge_COM_ERROR := (xEcatBridge_TxPDO_state OR xEcatBridge_External_device_not_connected OR xEcatBridge_WcState);

xOnBeamline := (xEcatBridge_COM_ERROR = FALSE) AND (sHUTCH_PLC_NAME = 'TMO');

(*TurboPump running Flag with 30 second Turn Off delay.*)
b_TurboPumpRunningFlag :=
    (CVMI_GJ_PTM_01.iq_stPtm.eState = E_PumpState.pumpRUNNING)  AND
    (CVMI_GJ_PTM_02.iq_stPtm.eState = E_PumpState.pumpRUNNING) AND
    (CVMI_GJ_PTM_03.iq_stPtm.eState = E_PumpState.pumpRUNNING) AND
    (CVMI_GJ_PTM_04.iq_stPtm.eState = E_PumpState.pumpRUNNING) AND
    //(CVMI_MAIN_PTM_01.iq_stPtm.i_xAtSpd) AND  There is currently no readback so Turbo pump state is not checked.
    (CVMI_CATCH_PTM_01.iq_stPtm.i_xAtSpd) AND
    (CVMI_KTOF_PTM_01.iq_stPtm.i_xAtSpd) AND
//	(CVMI_KTOF_PTM_02.iq_stPtm.i_xAtSpd) AND  Currently not installed
    (CVMI_ROUGH_PTM_01.iq_stPtm.i_xAtSpd);
TurboPumpTOF(IN:= b_TurboPumpRunningFlag, PT := TurboPumpDelayTime);
xIP1_TURBOS_ALL_AtSpd:= TurboPumpTOF.Q;
(*High Voltage Saftey Loop*)// rHighVoltageMinPressure = 1e-05; (*Hard coded High voltage Minimum Enable Pressure*)
xHighVoltageSafteyLoopEnable:= (CVMI_CATCH_GCC_01.IG.rPRESS <= rHighVoltageMinPressure) AND (CVMI_CATCH_GCC_01.IG.xPRESS_OK = TRUE);

(*PIRANI Gauges*)
    CVMI_GJ_GPI_01.M_SetBits(32767);
    CVMI_GJ_GPI_01(PG=>);
//	CVMI_CATCH_GPI_01.M_SetBits(32767);
//	CVMI_CATCH_GPI_01(PG=>);

(*uPIRANI Gauges*)
    CVMI_ROUGH_GPI_01.M_SetBits(32767);
    CVMI_ROUGH_GPI_01(PG=>);
    CVMI_ROUGH_GPI_02.M_SetBits(32767);
    CVMI_ROUGH_GPI_02(PG=>);
    CVMI_ROUGH_GPI_03.M_SetBits(32767);
    CVMI_ROUGH_GPI_03(PG=>);
    CVMI_ROUGH_GPI_04.M_SetBits(32767);
    CVMI_ROUGH_GPI_04(PG=>);

(*Cold Cathode Gauges*)
    CVMI_GJ_GCC_01.M_SetBits(32767);
    CVMI_GJ_GCC_01(PG:=CVMI_GJ_GPI_01.PG,IG=>,bEP:=TRUE);
    CVMI_CATCH_GCC_01.M_SetBits(32767);
    CVMI_CATCH_GCC_01(PG:=CVMI_GJ_GPI_01.PG,IG=>,bEP:=TRUE);

(*Hot Cathode Gauges*)
    CVMI_MAIN_GHC_01.M_SetBits(32767);
    CVMI_MAIN_GHC_01(PG:=CVMI_GJ_GPI_01.PG,IG=>);

(*TURBO Pumps
*In general, if turbo pump setpoints are above the pirani guage readings or there is no downstream open path to a roughing pump, the turbo pump will close.
*
*)
    CVMI_GJ_PTM_01(i_xExtILKOk:= F_Turbo_NC_NO_Valve_Logic_NC(
                        i_stTurbo:= CVMI_GJ_PTM_01.iq_stPtm,
                        i_stISG:= CVMI_GJ_GPI_01.PG,
                        i_stBSG:= CVMI_ROUGH_GPI_04.PG,
                        iq_stValve_NO:= CVMI_ROUGH_VRC_02.iq_stValve,
                        iq_stValve_NC:= CVMI_ROUGH_VRC_03.iq_stValve,
                        iq_stValve_NC_second:= CVMI_ROUGH_VRC_01.iq_stValve,
                        EcatBridge_Error_Present:= xEcatBridge_COM_ERROR,
                        iq_stRoughRoughValve_NC_xOpnLS:= xTMO_ROUGH2_VRC_01_OPEN_LS,
                        iq_stRoughRoughValve_NC_second_xOpenLS:=xTMO_ROUGH1_VRC_01_OPEN_LS,
                        x_onBeamline:= xOnBeamline),
                    i_stGauge:= CVMI_ROUGH_GPI_04.PG,
                    i_rMaxBackingPressure:= 1,
                    iq_stPtm=> );

    CVMI_GJ_PTM_02(i_xExtILKOk:= F_Turbo_NC_NO_Valve_Logic_NC(
                        i_stTurbo:= CVMI_GJ_PTM_02.iq_stPtm,
                        i_stISG:= CVMI_GJ_GPI_01.PG,
                        i_stBSG:= CVMI_ROUGH_GPI_04.PG,
                        iq_stValve_NO:= CVMI_ROUGH_VRC_02.iq_stValve,
                        iq_stValve_NC:= CVMI_ROUGH_VRC_03.iq_stValve,
                        iq_stValve_NC_second:= CVMI_ROUGH_VRC_01.iq_stValve,
                        EcatBridge_Error_Present:= xEcatBridge_COM_ERROR,
                        iq_stRoughRoughValve_NC_xOpnLS:= xTMO_ROUGH2_VRC_01_OPEN_LS,
                        iq_stRoughRoughValve_NC_second_xOpenLS:=xTMO_ROUGH1_VRC_01_OPEN_LS,
                        x_onBeamline:= xOnBeamline),
                    i_stGauge:= CVMI_ROUGH_GPI_04.PG,
                    i_rMaxBackingPressure:= 1,
                    iq_stPtm=> );

    CVMI_GJ_PTM_03(i_xExtILKOk:= F_Turbo_NC_NO_Valve_Logic_NC(
                        i_stTurbo:= CVMI_GJ_PTM_03.iq_stPtm,
                        i_stISG:= CVMI_GJ_GPI_01.PG,
                        i_stBSG:= CVMI_ROUGH_GPI_04.PG,
                        iq_stValve_NO:= CVMI_ROUGH_VRC_02.iq_stValve,
                        iq_stValve_NC:= CVMI_ROUGH_VRC_03.iq_stValve,
                        iq_stValve_NC_second:= CVMI_ROUGH_VRC_01.iq_stValve,
                        EcatBridge_Error_Present:= xEcatBridge_COM_ERROR,
                        iq_stRoughRoughValve_NC_xOpnLS:= xTMO_ROUGH2_VRC_01_OPEN_LS,
                        iq_stRoughRoughValve_NC_second_xOpenLS:=xTMO_ROUGH1_VRC_01_OPEN_LS,
                        x_onBeamline:= xOnBeamline),
                    i_stGauge:= CVMI_ROUGH_GPI_04.PG,
                    i_rMaxBackingPressure:= 1,
                    iq_stPtm=> );

    CVMI_GJ_PTM_04(i_xExtILKOk:= F_Turbo_NC_NO_Valve_Logic_NC(
                        i_stTurbo:= CVMI_GJ_PTM_04.iq_stPtm,
                        i_stISG:= CVMI_GJ_GPI_01.PG,
                        i_stBSG:= CVMI_ROUGH_GPI_04.PG,
                        iq_stValve_NO:= CVMI_ROUGH_VRC_02.iq_stValve,
                        iq_stValve_NC:= CVMI_ROUGH_VRC_03.iq_stValve,
                        iq_stValve_NC_second:= CVMI_ROUGH_VRC_01.iq_stValve,
                        EcatBridge_Error_Present:= xEcatBridge_COM_ERROR,
                        iq_stRoughRoughValve_NC_xOpnLS:= xTMO_ROUGH2_VRC_01_OPEN_LS,
                        iq_stRoughRoughValve_NC_second_xOpenLS:=xTMO_ROUGH1_VRC_01_OPEN_LS,
                        x_onBeamline:= xOnBeamline),
                    i_stGauge:= CVMI_ROUGH_GPI_04.PG,
                    i_rMaxBackingPressure:= 1,
                    iq_stPtm=> );

    CVMI_MAIN_PTM_01(i_xExtILKOk:= F_Turbo_NC_NO_Valve_Logic_NC(
                        i_stTurbo:= CVMI_MAIN_PTM_01.iq_stPtm,
                        i_stISG:= CVMI_GJ_GPI_01.PG,
                        i_stBSG:= CVMI_ROUGH_GPI_02.PG,
                        iq_stValve_NO:= CVMI_ROUGH_VRC_02.iq_stValve,
                        iq_stValve_NC:= CVMI_ROUGH_VRC_01.iq_stValve,
                        iq_stValve_NC_second:= CVMI_ROUGH_VRC_03.iq_stValve,
                        EcatBridge_Error_Present:= xEcatBridge_COM_ERROR,
                        iq_stRoughRoughValve_NC_xOpnLS:= xTMO_ROUGH1_VRC_01_OPEN_LS,
                        iq_stRoughRoughValve_NC_second_xOpenLS:=xTMO_ROUGH2_VRC_01_OPEN_LS,
                        x_onBeamline:= xOnBeamline),
                    i_stGauge:= CVMI_ROUGH_GPI_02.PG,
                    i_rMaxBackingPressure:= 1,
                    iq_stPtm=> );

    CVMI_CATCH_PTM_01(
    i_xExtILKOk:= F_Turbo_NC_NO_Valve_Logic_NC(
                    i_stTurbo:= CVMI_CATCH_PTM_01.iq_stPtm,
                    i_stISG:= CVMI_GJ_GPI_01.PG,
                    i_stBSG:= CVMI_ROUGH_GPI_02.PG,
                    iq_stValve_NO:= CVMI_ROUGH_VRC_02.iq_stValve,
                    iq_stValve_NC:= CVMI_ROUGH_VRC_01.iq_stValve,
                    iq_stValve_NC_second:= CVMI_ROUGH_VRC_03.iq_stValve,
                    EcatBridge_Error_Present:= xEcatBridge_COM_ERROR,
                    iq_stRoughRoughValve_NC_xOpnLS:= xTMO_ROUGH1_VRC_01_OPEN_LS,
                    iq_stRoughRoughValve_NC_second_xOpenLS:=xTMO_ROUGH2_VRC_01_OPEN_LS,
                    x_onBeamline:= xOnBeamline),
    iq_stPtm=> );

    CVMI_KTOF_PTM_01(
    i_xExtILKOk:= F_Turbo_NC_NO_Valve_Logic_NC(
                    i_stTurbo:= CVMI_KTOF_PTM_01.iq_stPtm,
                    i_stISG:= CVMI_GJ_GPI_01.PG,
                    i_stBSG:= CVMI_ROUGH_GPI_02.PG,
                    iq_stValve_NO:= CVMI_ROUGH_VRC_02.iq_stValve,
                    iq_stValve_NC:= CVMI_ROUGH_VRC_01.iq_stValve,
                    iq_stValve_NC_second:= CVMI_ROUGH_VRC_03.iq_stValve,
                    EcatBridge_Error_Present:= xEcatBridge_COM_ERROR,
                    iq_stRoughRoughValve_NC_xOpnLS:= xTMO_ROUGH1_VRC_01_OPEN_LS,
                    iq_stRoughRoughValve_NC_second_xOpenLS:=xTMO_ROUGH2_VRC_01_OPEN_LS,
                    x_onBeamline:= xOnBeamline),
    iq_stPtm=> );

(*
    CVMI_KTOF_PTM_02(
    i_xExtILKOk:= F_Turbo_NC_NO_Valve_Logic_NC(
                    i_stTurbo:= CVMI_KTOF_PTM_02.iq_stPtm,
                    i_stISG:= CVMI_CATCH_GPI_01.PG,
                    i_stBSG:= CVMI_ROUGH_GPI_02.PG,
                    iq_stValve_NO:= CVMI_ROUGH_VRC_02.iq_stValve,
                    iq_stValve_NC:= CVMI_ROUGH_VRC_01.iq_stValve,
                    iq_stValve_NC_second:= CVMI_ROUGH_VRC_03.iq_stValve,
                    EcatBridge_Error_Present:= xEcatBridge_COM_ERROR,
                    iq_stRoughRoughValve_NC_xOpnLS:= xTMO_ROUGH1_VRC_01_OPEN_LS,
                    iq_stRoughRoughValve_NC_second_xOpenLS:=xTMO_ROUGH2_VRC_01_OPEN_LS,
                    x_onBeamline:= xOnBeamline),
    iq_stPtm=> );
*)

    CVMI_ROUGH_PTM_01(
    i_xExtILKOk:= F_Turbo_NC_NO_Valve_Logic_NC(
                    i_stTurbo:= CVMI_ROUGH_PTM_01.iq_stPtm,
                    i_stISG:= CVMI_GJ_GPI_01.PG,
                    i_stBSG:= CVMI_ROUGH_GPI_02.PG,
                    iq_stValve_NO:= CVMI_ROUGH_VRC_02.iq_stValve,
                    iq_stValve_NC:= CVMI_ROUGH_VRC_01.iq_stValve,
                    iq_stValve_NC_second:= CVMI_ROUGH_VRC_03.iq_stValve,
                    EcatBridge_Error_Present:= xEcatBridge_COM_ERROR,
                    iq_stRoughRoughValve_NC_xOpnLS:= xTMO_ROUGH1_VRC_01_OPEN_LS,
                    iq_stRoughRoughValve_NC_second_xOpenLS:=xTMO_ROUGH2_VRC_01_OPEN_LS,
                    x_onBeamline:= xOnBeamline),
    iq_stPtm=> );



(*Serial Communication*)
(*Assign adresses to the pfeiffer controllers connected to this serial terminal*)
st_Pfeiffer_CTRL_CVMI_CATCH_PTM_01[1].iSerialAddress :=1;
st_Pfeiffer_CTRL_CVMI_CATCH_PTM_01[1].xEnableComm := TRUE;
(* Instanitate the Function block for serial communication with Pfeiffer*)
fb_PfeifferCom_CVMI_CATCH_PTM_01(astPfeifferControl := st_Pfeiffer_CTRL_CVMI_CATCH_PTM_01,
                                 astPfeifferStatus:= st_Pfeiffer_RBK_CVMI_CATCH_PTM_01,
                              SerialRXBuffer:= SerialRXBuffer_CVMI_CATCH_PTM_01,
                              SerialTXBuffer:= SerialTXBuffer_CVMI_CATCH_PTM_01);
(* Copy Status Pv's into the PTM structure*)
CVMI_CATCH_PTM_01.M_Serial_IO(st_Pfeiffer_RBK:= st_Pfeiffer_RBK_CVMI_CATCH_PTM_01[1], st_Pfeiffer_CTRL:= st_Pfeiffer_CTRL_CVMI_CATCH_PTM_01[1]);

st_Pfeiffer_CTRL_CVMI_ROUGH_PTM_01[1].iSerialAddress :=1;
st_Pfeiffer_CTRL_CVMI_ROUGH_PTM_01[1].xEnableComm := TRUE;
fb_PfeifferCom_CVMI_ROUGH_PTM_01(astPfeifferControl := st_Pfeiffer_CTRL_CVMI_ROUGH_PTM_01,
                                 astPfeifferStatus:= st_Pfeiffer_RBK_CVMI_ROUGH_PTM_01,
                              SerialRXBuffer:= SerialRXBuffer_CVMI_ROUGH_PTM_01,
                              SerialTXBuffer:= SerialTXBuffer_CVMI_ROUGH_PTM_01);
CVMI_ROUGH_PTM_01.M_Serial_IO(st_Pfeiffer_RBK:= st_Pfeiffer_RBK_CVMI_ROUGH_PTM_01[1], st_Pfeiffer_CTRL:= st_Pfeiffer_CTRL_CVMI_ROUGH_PTM_01[1]);

st_Pfeiffer_CTRL_CVMI_KTOF_PTM_01[1].iSerialAddress :=1;
st_Pfeiffer_CTRL_CVMI_KTOF_PTM_01[1].xEnableComm := TRUE;
fb_PfeifferCom_CVMI_KTOF_PTM_01(astPfeifferControl := st_Pfeiffer_CTRL_CVMI_KTOF_PTM_01,
                                 astPfeifferStatus:= st_Pfeiffer_RBK_CVMI_KTOF_PTM_01,
                              SerialRXBuffer:= SerialRXBuffer_CVMI_KTOF_PTM_01,
                              SerialTXBuffer:= SerialTXBuffer_CVMI_KTOF_PTM_01);
CVMI_KTOF_PTM_01.M_Serial_IO(st_Pfeiffer_RBK:= st_Pfeiffer_RBK_CVMI_KTOF_PTM_01[1], st_Pfeiffer_CTRL:= st_Pfeiffer_CTRL_CVMI_KTOF_PTM_01[1]);

(*
st_Pfeiffer_CTRL_CVMI_KTOF_PTM_02[1].iSerialAddress :=1;
st_Pfeiffer_CTRL_CVMI_KTOF_PTM_02[1].xEnableComm := TRUE;
fb_PfeifferCom_CVMI_KTOF_PTM_02(astPfeifferControl := st_Pfeiffer_CTRL_CVMI_KTOF_PTM_02,
                                 astPfeifferStatus:= st_Pfeiffer_RBK_CVMI_KTOF_PTM_02,
                              SerialRXBuffer:= SerialRXBuffer_CVMI_KTOF_PTM_02,
                              SerialTXBuffer:= SerialTXBuffer_CVMI_KTOF_PTM_02);
CVMI_KTOF_PTM_02.M_Serial_IO(st_Pfeiffer_RBK:= st_Pfeiffer_RBK_CVMI_KTOF_PTM_02[1], st_Pfeiffer_CTRL:= st_Pfeiffer_CTRL_CVMI_KTOF_PTM_02[1]);
*)

(*Vacuum Gate Valve*)
fbGetCurTaskIndex();//getting index for first cycle of PLC operation

    IF(xOnBeamline) THEN //If OnBeamline then stay open.
        CVMI_ROUGH_VRC_01.M_Set_OPN_SW(TRUE);
        CVMI_ROUGH_VRC_01(
        i_xExtILK_OK:= TRUE,
        i_xOverrideMode:= xSystemOverrideMode_CVMI,
        iq_stValve=> );
    ELSE
        CVMI_ROUGH_VRC_01(//CVMI:ROUGH:VRC:01 can open when the pressure across the valve is below 10 torr //add the beamline
        i_xExtILK_OK:= (ABS(CVMI_ROUGH_GPI_01.PG.rPRESS - CVMI_ROUGH_GPI_02.PG.rPRESS)<3000.0),
        i_xOverrideMode:= xSystemOverrideMode_CVMI,
        iq_stValve=> );
    END_IF

    //CVMI:ROUGH:VRC:02 close when either pressure in the the GJ and CATCH chambers are above 10 torr.
    //-- delete when controls uncommented lines are proven to be correct
(*
    IF((CVMI_GJ_GPI_01.PG.rPRESS >10.0)) THEN
        //Set Valve to OPEN
        CVMI_ROUGH_VRC_02.M_Set_CLS_SW(False);
    END_IF
*)
    CVMI_ROUGH_VRC_02(
    i_xExtILK_OK:= NOT(CVMI_GJ_GPI_01.PG.rPRESS >10.0)
                   AND (xTMO_ROUGH1_VRC_01_OPEN_LS AND xTMO_ROUGH2_VRC_01_OPEN_LS),
    i_xOverrideMode:= xSystemOverrideMode_CVMI,
    iq_stValve=> );



//Normally Open Bypass Valve -- delete when controls uncommented lines are proven to be correct
//CVMI:ROUGH:VRC:02 close when either pressure in the the GJ and CATCH chambers are above 10 torr.
(*
    IF(xOnBeamline) THEN
        CVMI_ROUGH_VRC_02.M_Set_CLS_SW(FALSE);
    ELSIF (NOT xOnBeamline  OR (CVMI_GJ_GPI_01.PG.rPRESS > 10.0)) THEN
        CVMI_ROUGH_VRC_02.M_Set_CLS_SW(TRUE);
    END_IF
 //_TaskInfo[fbGetCurTaskIndex.index].FirstCycle

    CVMI_ROUGH_VRC_02(
    i_xExtILK_OK:= TRUE,
    i_xOverrideMode:= xSystemOverrideMode_CVMI,
    iq_stValve=> );
*)

    IF(xOnBeamline) THEN //If OnBeamline then stay open.
        CVMI_ROUGH_VRC_03.M_Set_OPN_SW(TRUE);
        CVMI_ROUGH_VRC_03(
        i_xExtILK_OK:= TRUE,
        i_xOverrideMode:= xSystemOverrideMode_CVMI,
        iq_stValve=> );
    ELSE
        CVMI_ROUGH_VRC_03(//CVMI:ROUGH:VRC:03 can open when the pressure across the valve is below 10 torr //add the beamline
        i_xExtILK_OK:= (ABS(CVMI_ROUGH_GPI_03.PG.rPRESS - CVMI_ROUGH_GPI_04.PG.rPRESS)<3000.0),
        i_xOverrideMode:= xSystemOverrideMode_CVMI,
        iq_stValve=> );
    END_IF

(*Update EtherCAT Bridge Outputs*)

xIP1_ROUGH_VRC_01_OPEN_LS 	:=	CVMI_ROUGH_VRC_01.M_IsOpen();
xIP1_ROUGH_VRC_02_OPEN_LS	:=	CVMI_ROUGH_VRC_02.M_IsOpen();
xIP1_ROUGH_VRC_03_OPEN_LS 	:= 	CVMI_ROUGH_VRC_03.M_IsOpen();
//xIP1_TURBO_FAULT AT %Q* : BOOL; already updated at turbo pump logic.
xIP1_MAIN_xAT_VAC 			:= 	CVMI_GJ_GCC_01.IG.xAT_VAC; // logic is changed here from catch GCC to GJ GCC only for air attenucator experiment 02-25
xIP1_MAIN_xPRESS_OK 		:= 	CVMI_GJ_GCC_01.IG.xPRESS_OK;
rIP1_MAIN_rPRESS 			:= 	CVMI_GJ_GCC_01.IG.rPRESS;
xIP1_HV_SAFETY_ENABLE		:=	xHighVoltageSafteyLoopEnable;

    ]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>